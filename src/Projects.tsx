import { useRef, useEffect } from "react";
import * as THREE from "three";
import gsap from "gsap";
import MUGOU from "../src/assets/project1.svg";
import Keun from "../src/assets/project3.svg";
import My from "../src/assets/project2.svg";
import Honvini from "../src/assets/project4.svg";
import Juhee from "../src/assets/project5.svg";

import styled from "@emotion/styled";

export default function AnimatedCards() {
  const mountRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // ÎßàÏö∞Ïä§ ÎìúÎûòÍ∑∏ Í¥ÄÎ†® Î≥ÄÏàòÎì§

    // üöÄ Three.js Í∏∞Î≥∏ ÏÑ§Ï†ï
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(
      75,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    camera.position.set(0, 2, 5);
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setClearColor(0x000000, 0);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
    renderer.setSize(window.innerWidth, window.innerHeight);
    if (mountRef.current) {
      mountRef.current.appendChild(renderer.domElement);
    }

    // üåü Ïπ¥Îìú Í∑∏Î£π ÏÉùÏÑ±
    const cardContents = [
      {
        title: "MUGOU",
        description: MUGOU,
      },
      {
        title: "Ï£ºÌù¨ÎÑ∑",
        description: My,
      },
      {
        title: "ÌÅ∞ÏÜåÎ¶¨",
        description: Keun,
      },
      {
        title: "ÌòºÎπÑÎãà",
        description: Honvini,
      },
      {
        title: "Ï£ºÏûëÍ≥µ",
        description: Juhee,
      },
    ];
    const cardGroup = new THREE.Group();
    scene.add(cardGroup);
    const createTextTexture = (title: string, description: string) => {
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");

      const scale = window.devicePixelRatio; // üöÄ Í≥†Ìï¥ÏÉÅÎèÑ Ïä§ÏºÄÏùº Ï†ÅÏö©
      const width = 600;
      const height = 540;

      canvas.width = width * scale; // Ìï¥ÏÉÅÎèÑ Ï°∞Ï†ï
      canvas.height = height * scale;

      if (ctx) {
        ctx.scale(scale, scale); // Î™®Îì† Í∑∏ÎûòÌîΩÏùÑ Í≥†Ìï¥ÏÉÅÎèÑÎ°ú Î†åÎçîÎßÅ
        ctx.fillStyle = "#e6e6e6";
        ctx.fillRect(0, 0, width, height);

        ctx.fillStyle = "#505050";
        ctx.font = `bold 55px Arial`;
        ctx.textAlign = "center";
        ctx.fillText(title, width / 2, 450); //ÌÖçÏä§Ìä∏ Ï∂îÍ∞Ä(ÌÖçÏä§Ìä∏, x, y)

        const image = new Image();
        image.src = description;
        image.onload = () => {
          ctx.drawImage(image, 150, 100, 250, 250); //Ïù¥ÎØ∏ÏßÄ Ï∂îÍ∞Ä(Ïù¥ÎØ∏ÏßÄ, x, y, width, height)
          texture.needsUpdate = true;
        };
      }
      const texture = new THREE.CanvasTexture(canvas);
      texture.anisotropy = 16;
      texture.minFilter = THREE.LinearFilter;
      texture.magFilter = THREE.LinearFilter;
      texture.needsUpdate = true;
      return texture;
    };
    const numCards = 5;
    const radius = 4;
    const cards: THREE.Mesh[] = [];

    for (let i = 0; i < numCards; i++) {
      const { title, description } = cardContents[i];
      const geometry = new THREE.PlaneGeometry(1.8, 2);
      const material = new THREE.MeshBasicMaterial({
        map: createTextTexture(title, description),
        side: THREE.DoubleSide,
      });

      const card = new THREE.Mesh(geometry, material);

      const angle = (6 - i / (numCards - 1)) * ((Math.PI * 2) / 3);
      card.position.x = Math.cos(angle) * radius;
      card.position.y = Math.sin(angle) * radius;
      card.rotation.z = angle - Math.PI / 2;

      cardGroup.add(card);
      cards.push(card);
    }
    cardGroup.rotation.z = Math.PI - 0.5;
    // üí° Îπõ Ï∂îÍ∞Ä
    const light = new THREE.AmbientLight(0xffffff, 1);
    scene.add(light);

    // üöÄ GSAP Ïï†ÎãàÎ©îÏù¥ÏÖò: ÎßàÏö∞Ïä§Î•º Ïò¨Î¶¨Î©¥ Ïπ¥ÎìúÍ∞Ä ÌäÄÏñ¥ÎÇòÏò§ÎèÑÎ°ù ÏÑ§Ï†ï
    cards.forEach((card, index) => {
      card.userData.index = index;
      card.userData.originalPos = card.position.clone();
    });

    window.addEventListener("mousemove", (event) => {
      const mouseX = (event.clientX / window.innerWidth) * 2 - 1;
      const hoveredCard = Math.floor(((mouseX + 1) / 2) * numCards);

      cards.forEach((card, index) => {
        if (index === hoveredCard) {
          gsap.to(card.position, { z: 1, duration: 0.5, ease: "power3.out" });
        } else {
          gsap.to(card.position, { z: 0, duration: 0.5, ease: "power3.out" });
        }
      });
    });

    // üé¨ Ïï†ÎãàÎ©îÏù¥ÏÖò Î£®ÌîÑ
    const animate = () => {
      requestAnimationFrame(animate);
      renderer.render(scene, camera);
    };
    animate();
    const onResize = () => {
      renderer.setSize(window.innerWidth, window.innerHeight); //Ï∞Ω ÌÅ¨Í∏∞Ïóê ÎßûÍ≤å Î†åÎçîÎü¨ ÌÅ¨Í∏∞ Ï°∞Ï†ï
      camera.aspect = window.innerWidth / window.innerHeight; //Ïπ¥Î©îÎùº ÎπÑÏú® Ï°∞Ï†ï
      camera.updateProjectionMatrix(); //Ïπ¥Î©îÎùº ÏóÖÎç∞Ïù¥Ìä∏
    };
    window.addEventListener("resize", onResize); //Ï∞Ω ÌÅ¨Í∏∞ Î≥ÄÍ≤Ω Ïù¥Î≤§Ìä∏ Ï∂îÍ∞Ä

    // üîß Cleanup (Î©îÎ™®Î¶¨ Ìï¥Ï†ú)
    return () => {
      if (mountRef.current) {
        mountRef.current.removeChild(renderer.domElement);
      }
    };
  }, [window.innerWidth, window.innerHeight]);

  return <Container ref={mountRef} />;
}
const Container = styled.div`
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  pointer-events: none;
`;
